<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
										http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
										http://www.springframework.org/schema/tx
										http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
										http://www.springframework.org/schema/aop
										http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
										http://www.springframework.org/schema/context
			  							http://www.springframework.org/schema/context/spring-context-4.0.xsd
										http://www.springframework.org/schema/mvc
			  							http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd">


    <description>Spring MVC Configuration</description>

    <!-- 加载配置属性文件 -->
    <context:property-placeholder ignore-unresolvable="true" location="classpath:ssm.properties"/><!--这里需要单独创建一个文件，用来存放配置信息-->

    <!-- 使用 Annotation 自动注册 Bean,只扫描 @Controller -->
    <context:component-scan base-package="com.graduation.ssm" use-default-filters="false">
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!-- 默认的注解映射的支持 -->
    <mvc:annotation-driven />

    <!-- 定义视图文件解析 -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="${web.view.prefix}"/>
        <property name="suffix" value="${web.view.suffix}"/><!--${}绑定的是.properties文件下的配置-->
    </bean>

    <!-- 静态资源映射 -->
    <mvc:resources mapping="/static/**" location="/static/" cache-period="31536000"/>

    <!--
        配置拦截器再用 ajax 会有问题
        简单的说,就是发送的是ajax异步请求，只是想获取一个json封装的数据，
        而在拦截器中却硬生生的加了个modelAndView，而且controller层返回的数据中也并没有实例modelAndView。
        这个modelAndView也不是ajax请求想要的返回数据。
    -->
    <!--&lt;!&ndash;配置拦截器&ndash;&gt;-->
<!--    <mvc:interceptors>-->
<!--        &lt;!&ndash;-->
<!--        第一个拦截器：-->
<!--        介绍：拦截所有路径（除去：/static/*、/login、/userLogin），拦截后的请求被分配到 所配置的 class 中-->
<!--        作用：防止用户未登录就可以访问 Servlet-->

<!--        第二个拦截器：-->
<!--        介绍：拦截所有路径，拦截后的请求被分配到 所配置的 class 中-->
<!--        作用：防止用户已经登录后，仍然可以返回登录页面-->

<!--        注：-->
<!--        这里的拦截器，执行顺序有些规则，在preHandle()的上是按照声明顺序来执行的，就是从上到下，-->
<!--        在postHandle()上是按照声明的倒序来执行的，就是从下向上-->
<!--        &ndash;&gt;-->
<!--        <mvc:interceptor>-->
<!--&lt;!&ndash;            <mvc:mapping path="/**"/>&ndash;&gt;-->
<!--&lt;!&ndash;            <mvc:exclude-mapping path="/static/**"/>&ndash;&gt;-->
<!--&lt;!&ndash;            <mvc:exclude-mapping path="/login"/>&ndash;&gt;-->
<!--&lt;!&ndash;            <mvc:exclude-mapping path="/userLogin"/>&ndash;&gt;-->
<!--            <mvc:mapping path="/main" />-->
<!--            <bean class="com.graduation.ssm.interceptor.LoginInterceptor"/>-->
<!--        </mvc:interceptor>-->

<!--        <mvc:interceptor>-->
<!--            <mvc:mapping path="/**"/>-->
<!--            <bean class="com.graduation.ssm.interceptor.BackToLoginInterceptor"/>-->
<!--        </mvc:interceptor>-->
<!--    </mvc:interceptors>-->

</beans>
